////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)
using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;
using System.Linq;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$Sudo", PassNonParseablePacket = true, Authority = AuthorityType.SGM)]
    public class SudoPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public string CharacterName { get; set; }

        public string CommandContents { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(new[] { ' ' }, 4);
                if (packetSplit.Length < 4)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                SudoPacket packetDefinition = new SudoPacket();
                if (!string.IsNullOrWhiteSpace(packetSplit[2]) && !string.IsNullOrWhiteSpace(packetSplit[3]))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.CharacterName = packetSplit[2];
                    packetDefinition.CommandContents = packetSplit[3];
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(SudoPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Sudo NAME COMMAND";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[Sudo]CharacterName: {CharacterName} CommandContents:{CommandContents}");
                if (CharacterName == "*")
                {
                    foreach (ClientSession sess in session.CurrentMapInstance.Sessions.ToList().Where(s => s.Character?.Authority <= session.Character.Authority))
                    {
                        sess.ReceivePacket(CommandContents, true);
                    }
                }
                else
                {
                    ClientSession Session = ServerManager.Instance.GetSessionByCharacterName(CharacterName);

                    if (Session != null && !string.IsNullOrWhiteSpace(CommandContents))
                    {
                        if (Session.Character?.Authority <= session.Character.Authority)
                        {
                            Session.ReceivePacket(CommandContents, true);
                        }
                        else
                        {
                            Session.SendPacket(UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("CANT_DO_THAT"), 0));
                        }
                    }
                    else
                    {
                        Session.SendPacket(UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("USER_NOT_CONNECTED"), 0));
                    }
                }
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}