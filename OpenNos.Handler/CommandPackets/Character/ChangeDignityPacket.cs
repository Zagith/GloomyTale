////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;

namespace OpenNos.Handler.CommandPackets.Character
{
    [PacketHeader("$ChangeDignity", "$Dignity" , PassNonParseablePacket = true, Authority = AuthorityType.GM)]
    public class ChangeDignityPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public int Dignity { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession sess))
            {
                return;
            }
            if (packetSplit.Length < 3)
            {
                sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }
            ChangeDignityPacket packetDefinition = new ChangeDignityPacket();
            if (int.TryParse(packetSplit[2], out int dignity))
            {
                packetDefinition._isParsed = true;
                packetDefinition.Dignity = dignity;
            }
            packetDefinition.ExecuteHandler(sess);
            LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(ChangeDignityPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$ChangeDignity AMOUNT";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[ChangeDignity]Dignity: {Dignity}");

                if (Dignity >= -1000 && Dignity <= 100)
                {
                    session.Character.Dignity = Dignity;
                    session.SendPacket(session.Character.GenerateFd());
                    session.SendPacket(
                        UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("DIGNITY_CHANGED"), 12));
                    session.CurrentMapInstance?.Broadcast(session, session.Character.GenerateIn(),
                        ReceiverType.AllExceptMe);
                    session.CurrentMapInstance?.Broadcast(session, session.Character.GenerateGidx(),
                        ReceiverType.AllExceptMe);
                }
                else
                {
                    session.SendPacket(
                        UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("BAD_DIGNITY"), 11));
                }
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}