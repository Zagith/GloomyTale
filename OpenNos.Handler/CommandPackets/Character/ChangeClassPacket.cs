////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using System;

namespace OpenNos.Handler.CommandPackets.Character
{
    [PacketHeader("$ChangeClass", "$Class" , PassNonParseablePacket = true, Authority = AuthorityType.GM)]
    public class ChangeClassPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public ClassType ClassType { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession sess))
            {
                return;
            }

            if (packetSplit.Length < 3)
            {
                sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }

            ChangeClassPacket packetDefinition = new ChangeClassPacket();
            if (Enum.TryParse(packetSplit[2], out ClassType classType))
            {
                packetDefinition._isParsed = true;
                packetDefinition.ClassType = classType;
            }

            packetDefinition.ExecuteHandler(sess);
            LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(ChangeClassPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$ChangeClass CLASS";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[ChangeClass]Class: {ClassType}");

                if (ClassType > ClassType.Magician)
                {
                    return;
                }

                session.Character.ChangeClass(ClassType, true);
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}
