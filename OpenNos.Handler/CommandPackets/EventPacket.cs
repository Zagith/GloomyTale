//// <auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using System;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$Event", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class EventPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public EventType EventType { get; set; }

        public int LvlBracket { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 3)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                EventPacket packetDefinition = new EventPacket();
                if (Enum.TryParse(packetSplit[2].ToUpper(), out EventType type) && int.TryParse(packetSplit[2].ToUpper(), out int bracket))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.EventType = type;
                    packetDefinition.LvlBracket = bracket;
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(EventPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Event EVENTTYPE";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[Event]EventType: {EventType.ToString()}");
                if (LvlBracket >= 1 && EventType == EventType.TorF)
                {
                    EventHelper.GenerateEvent(EventType, QuestionType: (short)LvlBracket);
                }
                else if (LvlBracket >= 0)
                {
                    EventHelper.GenerateEvent(EventType, LvlBracket);
                }
                else
                {
                    EventHelper.GenerateEvent(EventType);
                }
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}