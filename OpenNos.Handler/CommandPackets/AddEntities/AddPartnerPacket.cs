////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.Handler.Extensions;

namespace OpenNos.Handler.CommandPackets.AddEntities
{
    [PacketHeader("$AddPartner", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class AddPartnerPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public byte Level { get; set; }

        public short MonsterVNum { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession sess))
            {
                return;
            }
            if (packetSplit.Length < 4)
            {
                sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }
            AddPartnerPacket packetDefinition = new AddPartnerPacket();
            if (short.TryParse(packetSplit[2], out short vnum) && byte.TryParse(packetSplit[3], out byte level))
            {
                packetDefinition._isParsed = true;
                packetDefinition.MonsterVNum = vnum;
                packetDefinition.Level = level;
            }
            packetDefinition.ExecuteHandler(sess);
            LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(AddPartnerPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$AddPartner VNUM LEVEL";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[AddPartner]NpcMonsterVNum: {MonsterVNum} Level: {Level}");

                session.AddMate(MonsterVNum, Level, MateType.Partner);
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}