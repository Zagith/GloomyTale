////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.DAL;
using OpenNos.Data;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;
using System.Linq;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$RollBack", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class BackMobPacket
    {
        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                BackMobPacket packetDefinition = new BackMobPacket();
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(BackMobPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$RollBack ";

        private void ExecuteHandler(ClientSession Session)
        {
            if (!Session.HasCurrentMapInstance)
            {
                return;
            }

            Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(), $"[BackMob]");
            object lastObject = Session.CurrentMapInstance.RemovedMobNpcList.LastOrDefault();

            if (lastObject is MapMonster mapMonster)
            {
                MapMonsterDTO backMonst = new MapMonsterDTO
                {
                    MonsterVNum = mapMonster.MonsterVNum,
                    MapX = mapMonster.MapX,
                    MapY = mapMonster.MapY,
                    MapId = Session.Character.MapInstance.Map.MapId,
                    Position = Session.Character.Direction,
                    IsMoving = mapMonster.IsMoving,
                    MapMonsterId = ServerManager.Instance.GetNextMobId()
                };
                if (!DAOFactory.MapMonsterDAO.DoesMonsterExist(backMonst.MapMonsterId))
                {
                    DAOFactory.MapMonsterDAO.Insert(backMonst);
                    if (DAOFactory.MapMonsterDAO.LoadById(backMonst.MapMonsterId) is MapMonsterDTO monsterDTO)
                    {
                        MapMonster monster = new MapMonster(monsterDTO);
                        monster.Initialize(Session.CurrentMapInstance);
                        Session.CurrentMapInstance.AddMonster(monster);
                        Session.CurrentMapInstance?.Broadcast(monster.GenerateIn());
                        Session.CurrentMapInstance.RemovedMobNpcList.Remove(mapMonster);
                        Session.SendPacket(Session.Character.GenerateSay($"MapMonster VNum: {backMonst.MonsterVNum} recovered sucessfully", 10));
                    }
                }
            }
            else if (lastObject is MapNpc mapNpc)
            {
                MapNpcDTO backNpc = new MapNpcDTO
                {
                    NpcVNum = mapNpc.NpcVNum,
                    MapX = mapNpc.MapX,
                    MapY = mapNpc.MapY,
                    MapId = Session.Character.MapInstance.Map.MapId,
                    Position = Session.Character.Direction,
                    IsMoving = mapNpc.IsMoving,
                    MapNpcId = ServerManager.Instance.GetNextMobId()
                };
                if (!DAOFactory.MapNpcDAO.DoesNpcExist(backNpc.MapNpcId))
                {
                    DAOFactory.MapNpcDAO.Insert(backNpc);
                    if (DAOFactory.MapNpcDAO.LoadById(backNpc.MapNpcId) is MapNpcDTO npcDTO)
                    {
                        MapNpc npc = new MapNpc(npcDTO);
                        npc.Initialize(Session.CurrentMapInstance);
                        Session.CurrentMapInstance.AddNPC(npc);
                        Session.CurrentMapInstance?.Broadcast(npc.GenerateIn());
                        Session.CurrentMapInstance.RemovedMobNpcList.Remove(mapNpc);
                        Session.SendPacket(Session.Character.GenerateSay($"MapNpc VNum: {backNpc.NpcVNum} recovered sucessfully", 10));
                    }
                }
            }
        }

        #endregion
    }
}