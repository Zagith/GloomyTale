////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;
using System.Threading.Tasks;

namespace OpenNos.Handler.CommandPackets.Map
{
    [PacketHeader("$ResetMap" , PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class MapResetPacket
    {
        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                MapResetPacket packetDefinition = new MapResetPacket();
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(MapResetPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$ResetMap ";

        private void ExecuteHandler(ClientSession session)
        {
            if (session.Character.IsChangingMapInstance)
            {
                return;
            }
            if (session.CurrentMapInstance != null)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[MapReset]MapId: {session.CurrentMapInstance.Map.MapId}");
                GameObject.MapInstance newMapInstance = ServerManager.ResetMapInstance(session.CurrentMapInstance);

                Parallel.ForEach(session.CurrentMapInstance.Sessions, sess =>
                ServerManager.Instance.ChangeMapInstance(sess.Character.CharacterId, newMapInstance.MapInstanceId, sess.Character.PositionX, sess.Character.PositionY));
            }
        }

        #endregion
    }
}