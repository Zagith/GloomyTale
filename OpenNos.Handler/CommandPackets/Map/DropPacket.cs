////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using System;
using System.Reactive.Linq;

namespace OpenNos.Handler.CommandPackets.Map
{
    [PacketHeader("$Drop", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class DropPacket
    {

        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public short VNum { get; set; }

        public short Amount { get; set; }

        public int Count { get; set; }

        public int Time { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession sess))
            {
                return;
            }
            if (packetSplit.Length < 3)
            {
                sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }
            DropPacket packetDefinition = new DropPacket();
            if (short.TryParse(packetSplit[2], out short vnum) && short.TryParse(packetSplit[3], out short amount)
                    && int.TryParse(packetSplit[4], out int count) && int.TryParse(packetSplit[5], out int time))
            {
                packetDefinition._isParsed = true;
                packetDefinition.VNum = vnum;
                packetDefinition.Amount = amount;
                packetDefinition.Count = count;
                packetDefinition.Time = time;
            }
            packetDefinition.ExecuteHandler(sess);
            LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(DropPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$AddSkill SKILLVNUM";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(),
                       $"[Drop]ItemVNum: {VNum} Amount: {Amount} Count: {Count} Time: {Time}");
                short vnum = VNum;
                short amount = Amount;
                if (amount < 1) { amount = 1; }
                else if (amount > 999) { amount = 999; }
                int count = Count;
                if (count < 1) { count = 1; }
                int time =Time;

                GameObject.MapInstance instance = Session.CurrentMapInstance;

                Observable.Timer(TimeSpan.FromSeconds(0)).Subscribe(observer =>
                {
                    {
                        for (int i = 0; i < count; i++)
                        {
                            MonsterMapItem droppedItem = new MonsterMapItem(Session.Character.PositionX, Session.Character.PositionY, vnum, amount);
                            instance.DroppedList[droppedItem.TransportId] = droppedItem;
                            instance.Broadcast(
                                $"drop {droppedItem.ItemVNum} {droppedItem.TransportId} {droppedItem.PositionX} {droppedItem.PositionY} {(droppedItem.GoldAmount > 1 ? droppedItem.GoldAmount : droppedItem.Amount)} 0 -1");

                            System.Threading.Thread.Sleep(time * 1000 / count);
                        }
                    }
                });
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion

    }
}