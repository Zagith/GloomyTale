////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.DAL;
using OpenNos.Data;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;

namespace OpenNos.Handler.CommandPackets.Map
{
    [PacketHeader("$AddNpc" , PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class AddNpcPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public bool IsMoving { get; set; }

        public short NpcVNum { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession sess))
            {
                return;
            }
            if (packetSplit.Length < 4)
            {
                sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }
            AddNpcPacket packetDefinition = new AddNpcPacket();
            if (short.TryParse(packetSplit[2], out short vnum))
            {
                packetDefinition._isParsed = true;
                packetDefinition.NpcVNum = vnum;
                packetDefinition.IsMoving = packetSplit[3] == "1";
            }
            packetDefinition.ExecuteHandler(sess);
            LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(AddNpcPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$AddMonster VNUM MOVE";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(),
                     $"[AddNpc]NpcMonsterVNum: {NpcVNum} IsMoving: {IsMoving}");
                if (!Session.HasCurrentMapInstance)
                {
                    return;
                }

                NpcMonster npcmonster = ServerManager.GetNpcMonster(NpcVNum);
                if (npcmonster == null)
                {
                    return;
                }

                MapNpcDTO newNpc = new MapNpcDTO
                {
                    NpcVNum = NpcVNum,
                    MapY = Session.Character.PositionY,
                    MapX = Session.Character.PositionX,
                    MapId = Session.Character.MapInstance.Map.MapId,
                    Position = Session.Character.Direction,
                    IsMoving = IsMoving,
                    MapNpcId = ServerManager.Instance.GetNextNpcId()
                };
                if (!DAOFactory.MapNpcDAO.DoesNpcExist(newNpc.MapNpcId))
                {
                    DAOFactory.MapNpcDAO.Insert(newNpc);
                    if (DAOFactory.MapNpcDAO.LoadById(newNpc.MapNpcId) is MapNpcDTO npcDTO)
                    {
                        MapNpc npc = new MapNpc(npcDTO);
                        npc.Initialize(Session.CurrentMapInstance);
                        Session.CurrentMapInstance.AddNPC(npc);
                        Session.CurrentMapInstance?.Broadcast(npc.GenerateIn());
                    }
                }

                Session.SendPacket(Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("DONE"), 10));
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}