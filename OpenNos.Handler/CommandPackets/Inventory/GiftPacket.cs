////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.DAL;
using OpenNos.Data;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using System.Linq;
using System.Threading.Tasks;

namespace OpenNos.Handler.CommandPackets.Inventory
{
    [PacketHeader("$Gift", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class GiftPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public byte Amount { get; set; }

        public string CharacterName { get; set; }

        public sbyte Rare { get; set; }

        public byte Upgrade { get; set; }

        public short Design { get; set; }

        public short ReceiverLevelMin { get; set; }

        public short ReceiverLevelMax { get; set; }

        public short VNum { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 7)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                GiftPacket packetDefinition = new GiftPacket();
                if (!string.IsNullOrWhiteSpace(packetSplit[2]) && short.TryParse(packetSplit[3], out short vnum) 
                        && byte.TryParse(packetSplit[4], out byte amount) && sbyte.TryParse(packetSplit[5], out sbyte rare) 
                            && byte.TryParse(packetSplit[6], out byte upgrade) && short.TryParse(packetSplit[7], out short design)
                                && short.TryParse(packetSplit[8], out short receiverLevelMin) && short.TryParse(packetSplit[9], out short receiverLevelMax))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.CharacterName = packetSplit[2];
                    packetDefinition.VNum = vnum;
                    packetDefinition.Amount = amount;
                    packetDefinition.Rare = rare;
                    packetDefinition.Upgrade = upgrade;
                    packetDefinition.Design = design;
                    packetDefinition.ReceiverLevelMin = receiverLevelMin;
                    packetDefinition.ReceiverLevelMax = receiverLevelMax;
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(GiftPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Gift NAME(*) VNUM AMOUNT RARE UPGRADE";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(),
                    $"[Gift]CharacterName: {CharacterName} ItemVNum: {VNum} Amount: {Amount} Rare: {Rare} Upgrade: {Upgrade} Design: {Design}");

                if (CharacterName == "*")
                {
                    if (Session.HasCurrentMapInstance)
                    {
                        Parallel.ForEach(Session.CurrentMapInstance.Sessions,
                            session => Session.Character.SendGift(session.Character.CharacterId, VNum,
                                Amount, Rare, Upgrade, Design, false));
                        Session.SendPacket(
                            Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("GIFT_SENT"), 10));
                    }
                }
                else if (CharacterName == "ALL")
                {
                    int levelMin = ReceiverLevelMin;
                    int levelMax = ReceiverLevelMax == 0 ? 99 : ReceiverLevelMax;

                    DAOFactory.CharacterDAO.LoadAll().ToList().ForEach(chara =>
                    {
                        if (chara.Level >= levelMin && chara.Level <= levelMax)
                        {
                            Session.Character.SendGift(chara.CharacterId, VNum, Amount,
                                Rare, Upgrade, Design, false);
                        }
                    });
                    Session.SendPacket(
                        Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("GIFT_SENT"), 10));
                }
                else
                {
                    CharacterDTO chara = DAOFactory.CharacterDAO.LoadByName(CharacterName);
                    if (chara != null)
                    {
                        Session.Character.SendGift(chara.CharacterId, VNum, Amount,
                            Rare, Upgrade, Design, false);
                        Session.SendPacket(
                            Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("GIFT_SENT"), 10));
                    }
                    else
                    {
                        Session.SendPacket(
                            UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("USER_NOT_CONNECTED"),
                                0));
                    }
                }
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}