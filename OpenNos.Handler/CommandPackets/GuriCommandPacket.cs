////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$Guri", PassNonParseablePacket = true, Authority = AuthorityType.Administrator)]
    public class GuriCommandPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public byte Argument { get; set; }

        public byte Type { get; set; }

        public int Value { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 5)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                GuriCommandPacket packetDefinition = new GuriCommandPacket();
                if (byte.TryParse(packetSplit[2], out byte type) && byte.TryParse(packetSplit[3], out byte arg) && int.TryParse(packetSplit[4], out int value))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.Type = type;
                    packetDefinition.Argument = arg;
                    packetDefinition.Value = value;
                }
                packetDefinition.ExecuteHandler(sess);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(GuriCommandPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Guri TYPE ARGUMENT VALUE";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                    $"[Guri]Type: {Type} Value: {Value} Arguments: {Argument}");

                session.SendPacket(UserInterfaceHelper.GenerateGuri(Type, Argument,
                    session.Character.CharacterId, Value));
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}