////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$FamilyFaction", PassNonParseablePacket = true, Authority = AuthorityType.SGM)]
    public class FamilyFactionPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public string FamilyName { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 3)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                FamilyFactionPacket packetDefinition = new FamilyFactionPacket();
                if (!string.IsNullOrWhiteSpace(packetSplit[2]))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.FamilyName = packetSplit[2];
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(FamilyFactionPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Event EVENTTYPE";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                if (ServerManager.Instance.ChannelId == 51)
                {
                    Session.SendPacket(
                        UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("CHANGE_NOT_PERMITTED_ACT4"),
                            0));
                    return;
                }
                if (Session.CurrentMapInstance.MapInstanceType == MapInstanceType.Act4ShipAngel
                    || Session.CurrentMapInstance.MapInstanceType == MapInstanceType.Act4ShipDemon)
                {
                    Session.SendPacket(
                        UserInterfaceHelper.GenerateMsg(Language.Instance.GetMessageFromKey("CHANGE_NOT_PERMITTED_ACT4SHIP"),
                            0));
                    return;
                }
                if (string.IsNullOrEmpty(FamilyName) && Session.Character.Family != null)
                {
                    Session.Character.Family.ChangeFaction(Session.Character.Family.FamilyFaction == 1 ? (byte)2 : (byte)1, Session);
                    return;
                }
                Family family = ServerManager.Instance.FamilyList.FirstOrDefault(s => s.Name == FamilyName);
                if (family != null)
                {
                    family.ChangeFaction(family.FamilyFaction == 1 ? (byte)2 : (byte)1, Session);
                }
                else
                {
                    Session.SendPacket(Session.Character.GenerateSay("Family not found.", 10));
                }
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}