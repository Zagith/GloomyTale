////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.DAL;
using OpenNos.Data;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.Master.Library.Client;
using System.Linq;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$ServerInfo", PassNonParseablePacket = true, Authority = AuthorityType.SGM)]
    public class ServerInfoPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public int? ChannelId { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(new[] { ' ' }, 3);
                if (packetSplit.Length < 3)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                ServerInfoPacket packetDefinition = new ServerInfoPacket();
                if (int.TryParse(packetSplit[2], out int value))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.ChannelId = value;
                }
                packetDefinition.ExecuteHandler(sess);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(ServerInfoPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$ServerInfo ChannelId";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(), "[ServerInfo]");

                session.SendPacket(session.Character.GenerateSay($"------------Server Info------------", 11));

                long ActualChannelId = 0;

                CommunicationServiceClient.Instance.GetOnlineCharacters().Where(s => ChannelId == null || s[1] == ChannelId).OrderBy(s => s[1]).ToList().ForEach(s =>
                {
                    if (s[1] > ActualChannelId)
                    {
                        if (ActualChannelId > 0)
                        {
                            session.SendPacket(session.Character.GenerateSay("----------------------------------------", 11));
                        }
                        ActualChannelId = s[1];
                        session.SendPacket(session.Character.GenerateSay($"-------------Channel:{ActualChannelId}-------------", 11));
                    }
                    CharacterDTO Character = DAOFactory.CharacterDAO.LoadById(s[0]);
                    session.SendPacket(
                        session.Character.GenerateSay(
                            $"CharacterName: {Character.Name} | CharacterId: {Character.CharacterId} | SessionId: {s[2]}", 12));
                });

                session.SendPacket(session.Character.GenerateSay("----------------------------------------", 11));
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}