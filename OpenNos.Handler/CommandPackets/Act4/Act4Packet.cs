////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;

namespace OpenNos.Handler.CommandPackets.Act4
{
    [PacketHeader("$Act4", PassNonParseablePacket = true, Authority = AuthorityType.GM)]
    public class Act4Packet
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            string[] packetSplit = packet.Split(' ');
            if (!(session is ClientSession Session))
            {
                return;
            }

            if (packetSplit.Length < 4)
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
                return;
            }

            Act4Packet packetDefinition = new Act4Packet();
            if (byte.TryParse(packetSplit[2], out byte faction) && int.TryParse(packetSplit[3], out int value))
            {
                packetDefinition._isParsed = true;
            }
            packetDefinition.ExecuteHandler(Session);
        }

        public static void Register() => PacketFacility.AddHandler(typeof(Act4Packet), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Act4";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed && ServerManager.Instance.ChannelId == 51)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(), $"[Act4]");                
                if (ServerManager.Instance.IsAct4Online())
                {
                    switch (Session.Character.Faction)
                    {
                        case FactionType.None:
                            ServerManager.Instance.ChangeMap(Session.Character.CharacterId, 129, 77, 141);
                            Session.SendPacket(UserInterfaceHelper.GenerateInfo("You need to be part of a faction to join Act 4"));
                            return;

                        case FactionType.Angel:
                            Session.Character.MapId = 130;
                            Session.Character.MapX = 12;
                            Session.Character.MapY = 40;
                            break;

                        case FactionType.Demon:
                            Session.Character.MapId = 131;
                            Session.Character.MapX = 12;
                            Session.Character.MapY = 40;
                            break;
                    }

                    Session.Character.ChangeChannel(ServerManager.Instance.Configuration.Act4IP, ServerManager.Instance.Configuration.Act4Port, 1);
                }
                else
                {
                    ServerManager.Instance.ChangeMap(Session.Character.CharacterId, 129, 77, 141);
                    Session.SendPacket(UserInterfaceHelper.GenerateInfo(Language.Instance.GetMessageFromKey("ACT4_OFFLINE")));
                }
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }
        #endregion
    }
}