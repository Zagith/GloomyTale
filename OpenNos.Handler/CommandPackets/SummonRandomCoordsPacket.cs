////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;
using System;
using System.Collections.Generic;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$MobRain", PassNonParseablePacket = true, Authority = AuthorityType.SGM)]
    public class MobRainPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public byte Amount { get; set; }

        public bool IsMoving { get; set; }

        public short NpcMonsterVNum { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 5)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                MobRainPacket packetDefinition = new MobRainPacket();
                if (short.TryParse(packetSplit[2], out short vnum) && byte.TryParse(packetSplit[3], out byte amount))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.NpcMonsterVNum = vnum;
                    packetDefinition.Amount = amount;
                    packetDefinition.IsMoving = packetSplit[4] == "1";
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(MobRainPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Summon VNUM AMOUNT MOVE";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(),
                    $"[MobRain]NpcMonsterVNum: {NpcMonsterVNum} Amount: {Amount} IsMoving: {IsMoving}");
                if (Session.IsOnMap && Session.HasCurrentMapInstance)
                {
                    NpcMonster npcmonster = ServerManager.GetNpcMonster(NpcMonsterVNum);
                    if (npcmonster == null)
                    {
                        return;
                    }

                    List<MonsterToSummon> SummonParameters = new List<MonsterToSummon>();
                    SummonParameters.AddRange(Session.Character.MapInstance.Map.GenerateMonsters(NpcMonsterVNum, Amount, IsMoving, new List<EventContainer>()));
                    EventHelper.Instance.ScheduleEvent(TimeSpan.FromSeconds(1), new EventContainer(Session.CurrentMapInstance, EventActionType.SPAWNMONSTERS, SummonParameters));
                }
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}