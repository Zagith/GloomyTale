////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.DAL;
using OpenNos.Data;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using OpenNos.GameObject.Networking;
using System.Linq;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$Promote", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class PromotePacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public string CharacterName { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 3)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                PromotePacket packetDefinition = new PromotePacket();
                if (!string.IsNullOrWhiteSpace(packetSplit[2]))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.CharacterName = packetSplit[2];
                }
                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(PromotePacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$Promote NAME";

        private void ExecuteHandler(ClientSession Session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", Session.GenerateIdentity(),
                    $"[Promote]CharacterName: {CharacterName}");
                string name = CharacterName;
                try
                {
                    AccountDTO account = DAOFactory.AccountDAO.LoadById(DAOFactory.CharacterDAO.LoadByName(name).AccountId);
                    if (account?.Authority >= AuthorityType.User || account.Authority.Equals(AuthorityType.BitchNiggerFaggot))
                    {
                        if (account.Authority < Session.Account.Authority)
                        {
                            AuthorityType newAuthority = AuthorityType.User;
                            switch (account.Authority)
                            {
                                case AuthorityType.User:
                                    newAuthority = AuthorityType.GS;
                                    break;
                                case AuthorityType.GS:
                                    newAuthority = AuthorityType.GM;
                                    break;
                                case AuthorityType.GM:
                                    newAuthority = AuthorityType.SGM;
                                    break;
                                case AuthorityType.SGM:
                                    newAuthority = AuthorityType.GA;
                                    break;
                                default:
                                    newAuthority = account.Authority;
                                    break;
                            }
                            account.Authority = newAuthority;
                            DAOFactory.AccountDAO.InsertOrUpdate(ref account);
                            ClientSession session =
                                ServerManager.Instance.Sessions.FirstOrDefault(s => s.Character?.Name == name);

                            if (session != null)
                            {
                                session.Account.Authority = newAuthority;
                                session.Character.Authority = newAuthority;
                                ServerManager.Instance.ChangeMap(session.Character.CharacterId);
                                DAOFactory.AccountDAO.WriteGeneralLog(session.Account.AccountId, session.IpAddress,
                                    session.Character.CharacterId, GeneralLogType.Promotion, $"by: {Session.Character.Name}");
                            }
                            else
                            {
                                DAOFactory.AccountDAO.WriteGeneralLog(account.AccountId, "25.52.104.84", null,
                                    GeneralLogType.Promotion, $"by: {Session.Character.Name}");
                            }

                            Session.SendPacket(Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("DONE"), 10));
                        }
                        else
                        {
                            Session.SendPacket(
                                Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("CANT_DO_THAT"), 10));
                        }

                    }
                    else
                    {
                        Session.SendPacket(
                            Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("USER_NOT_FOUND"), 10));
                    }
                }
                catch
                {
                    Session.SendPacket(
                        Session.Character.GenerateSay(Language.Instance.GetMessageFromKey("USER_NOT_FOUND"), 10));
                }
            }
            else
            {
                Session.SendPacket(Session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}