////<auto-generated <- Codemaid exclusion for now (PacketIndex Order is important for maintenance)

using OpenNos.Core;
using OpenNos.Core.Serializing;
using OpenNos.Domain;
using OpenNos.GameObject;
using OpenNos.GameObject.Helpers;
using System;
using System.Reactive.Linq;
using System.Threading;

namespace OpenNos.Handler.CommandPackets
{
    [PacketHeader("$ItemRain", PassNonParseablePacket = true, Authority = AuthorityType.GA)]
    public class ItemRainPacket
    {
        #region Members

        private bool _isParsed;

        #endregion

        #region Properties

        public byte Amount { get; set; }

        public int Count { get; set; }

        public int Time { get; set; }

        public short VNum { get; set; }

        #endregion

        #region Methods

        public static void HandlePacket(object session, string packet)
        {
            if (session is ClientSession sess)
            {
                string[] packetSplit = packet.Split(' ');
                if (packetSplit.Length < 6)
                {
                    sess.SendPacket(sess.Character.GenerateSay(ReturnHelp(), 10));
                    return;
                }
                ItemRainPacket packetDefinition = new ItemRainPacket();
                if (short.TryParse(packetSplit[2], out short vnum) && byte.TryParse(packetSplit[3], out byte amount)
                    && int.TryParse(packetSplit[4], out int count) && int.TryParse(packetSplit[5], out int time))
                {
                    packetDefinition._isParsed = true;
                    packetDefinition.VNum = vnum;
                    packetDefinition.Amount = amount;
                    packetDefinition.Count = count;
                    packetDefinition.Time = time;
                }

                packetDefinition.ExecuteHandler(sess);
                LogHelper.Instance.InsertCommandLog(sess.Character.CharacterId, packet, sess.IpAddress);
            }
        }

        public static void Register() => PacketFacility.AddHandler(typeof(ItemRainPacket), HandlePacket, ReturnHelp);

        public static string ReturnHelp() => "$ItemRain VNUM AMOUNT COUNT TIME";

        private void ExecuteHandler(ClientSession session)
        {
            if (_isParsed)
            {
                Logger.LogUserEvent("GMCOMMAND", session.GenerateIdentity(),
                      $"[ItemRain]ItemVNum: {VNum} Amount: {Amount} Count: {Count} Time: {Time}");
                short vnum = VNum;
                short amount = Amount;
                if (amount > 999) { amount = 999; }
                int count = Count;
                int time = Time;

                GameObject.MapInstance instance = session.CurrentMapInstance;

                Observable.Timer(TimeSpan.FromSeconds(0)).Subscribe(observer =>
                {
                    for (int i = 0; i < count; i++)
                    {
                        MapCell cell = instance.Map.GetRandomPosition();
                        MonsterMapItem droppedItem = new MonsterMapItem(cell.X, cell.Y, vnum, amount);
                        instance.DroppedList[droppedItem.TransportId] = droppedItem;
                        instance.Broadcast(
                            $"drop {droppedItem.ItemVNum} {droppedItem.TransportId} {droppedItem.PositionX} {droppedItem.PositionY} {(droppedItem.GoldAmount > 1 ? droppedItem.GoldAmount : droppedItem.Amount)} 0 -1");

                        System.Threading.Thread.Sleep(time * 1000 / count);
                    }
                });
            }
            else
            {
                session.SendPacket(session.Character.GenerateSay(ReturnHelp(), 10));
            }
        }

        #endregion
    }
}