// <auto-generated />
using System;
using GloomyTale.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GloomyTale.DAL.EF.Migrations
{
    [DbContext(typeof(OpenNosContext))]
    partial class OpenNosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GloomyTale.DAL.EF.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Authority")
                        .HasColumnType("smallint");

                    b.Property<bool>("DailyRewardSent")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<long>("ReferrerId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegistrationIP")
                        .HasColumnType("nvarchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.BCard", b =>
                {
                    b.Property<int>("BCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("CardId")
                        .HasColumnType("smallint");

                    b.Property<byte>("CastType")
                        .HasColumnType("tinyint");

                    b.Property<int>("FirstData")
                        .HasColumnType("int");

                    b.Property<bool>("IsLevelDivided")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLevelScaled")
                        .HasColumnType("bit");

                    b.Property<short?>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short?>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<int>("SecondData")
                        .HasColumnType("int");

                    b.Property<short?>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("SubType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ThirdData")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("BCardId");

                    b.HasIndex("CardId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("NpcMonsterVNum");

                    b.HasIndex("SkillVNum");

                    b.ToTable("BCard");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.BazaarItem", b =>
                {
                    b.Property<long>("BazaarItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPackage")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("MedalUsed")
                        .HasColumnType("bit");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.HasKey("BazaarItemId");

                    b.HasIndex("ItemInstanceId");

                    b.HasIndex("SellerId");

                    b.ToTable("BazaarItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.BoxItem", b =>
                {
                    b.Property<long>("BoxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("ItemGeneratedAmount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemGeneratedDesign")
                        .HasColumnType("smallint");

                    b.Property<byte>("ItemGeneratedRare")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ItemGeneratedUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<short>("ItemGeneratedVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("OriginalItemDesign")
                        .HasColumnType("smallint");

                    b.Property<short>("OriginalItemVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Probability")
                        .HasColumnType("tinyint");

                    b.HasKey("BoxItemId");

                    b.ToTable("BoxItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Card", b =>
                {
                    b.Property<short>("CardId")
                        .HasColumnType("smallint");

                    b.Property<byte>("BuffType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Delay")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("Propability")
                        .HasColumnType("tinyint");

                    b.Property<short>("TimeoutBuff")
                        .HasColumnType("smallint");

                    b.Property<byte>("TimeoutBuffChance")
                        .HasColumnType("tinyint");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CellonOption", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CellonOptionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EquipmentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CellonOption");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Character", b =>
                {
                    b.Property<long>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("Act4Dead")
                        .HasColumnType("int");

                    b.Property<int>("Act4Kill")
                        .HasColumnType("int");

                    b.Property<int>("Act4Points")
                        .HasColumnType("int");

                    b.Property<int>("ArenaWinner")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("BuffBlocked")
                        .HasColumnType("bit");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<short>("Compliment")
                        .HasColumnType("smallint");

                    b.Property<int>("Contributi")
                        .HasColumnType("int");

                    b.Property<float>("Dignity")
                        .HasColumnType("real");

                    b.Property<bool>("EmoticonsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("ExchangeBlocked")
                        .HasColumnType("bit");

                    b.Property<byte>("Faction")
                        .HasColumnType("tinyint");

                    b.Property<bool>("FamilyRequestBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("FriendRequestBlocked")
                        .HasColumnType("bit");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<long>("Gold")
                        .HasColumnType("bigint");

                    b.Property<long>("GoldBank")
                        .HasColumnType("bigint");

                    b.Property<bool>("GroupRequestBlocked")
                        .HasColumnType("bit");

                    b.Property<byte>("HairColor")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HairStyle")
                        .HasColumnType("tinyint");

                    b.Property<bool>("HeroChatBlocked")
                        .HasColumnType("bit");

                    b.Property<byte>("HeroLevel")
                        .HasColumnType("tinyint");

                    b.Property<long>("HeroXp")
                        .HasColumnType("bigint");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<bool>("HpBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartnerAutoRelive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetAutoRelive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeal")
                        .HasColumnType("bit");

                    b.Property<byte>("JobLevel")
                        .HasColumnType("tinyint");

                    b.Property<long>("JobLevelXp")
                        .HasColumnType("bigint");

                    b.Property<long>("LastFamilyLeave")
                        .HasColumnType("bigint");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<long>("LevelXp")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<int>("MasterPoints")
                        .HasColumnType("int");

                    b.Property<int>("MasterTicket")
                        .HasColumnType("int");

                    b.Property<byte>("MaxMateCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaxPartnerCount")
                        .HasColumnType("tinyint");

                    b.Property<bool>("MinilandInviteBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("MinilandMessage")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<short>("MinilandPoint")
                        .HasColumnType("smallint");

                    b.Property<byte>("MinilandState")
                        .HasColumnType("tinyint");

                    b.Property<bool>("MouseAimLock")
                        .HasColumnType("bit");

                    b.Property<int>("Mp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("QuickGetUp")
                        .HasColumnType("bit");

                    b.Property<long>("RagePoint")
                        .HasColumnType("bigint");

                    b.Property<long>("Reputation")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint");

                    b.Property<int>("SpAdditionPoint")
                        .HasColumnType("int");

                    b.Property<int>("SpPoint")
                        .HasColumnType("int");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<int>("TalentLose")
                        .HasColumnType("int");

                    b.Property<int>("TalentSurrender")
                        .HasColumnType("int");

                    b.Property<int>("TalentWin")
                        .HasColumnType("int");

                    b.Property<bool>("WhisperBlocked")
                        .HasColumnType("bit");

                    b.HasKey("CharacterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MapId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterQuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("FifthObjective")
                        .HasColumnType("int");

                    b.Property<int>("FirstObjective")
                        .HasColumnType("int");

                    b.Property<int>("FourthObjective")
                        .HasColumnType("int");

                    b.Property<bool>("IsMainQuest")
                        .HasColumnType("bit");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.Property<int>("SecondObjective")
                        .HasColumnType("int");

                    b.Property<int>("ThirdObjective")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("CharacterQuest");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterRelation", b =>
                {
                    b.Property<long>("CharacterRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedCharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("RelationType")
                        .HasColumnType("smallint");

                    b.HasKey("CharacterRelationId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RelatedCharacterId");

                    b.ToTable("CharacterRelation");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterTitle", b =>
                {
                    b.Property<long>("CharacterTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("TitleType")
                        .HasColumnType("smallint");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("CharacterTitleId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterTitle");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Animation")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<short>("Hit")
                        .HasColumnType("smallint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("ComboId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("Combo");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Drop", b =>
                {
                    b.Property<short>("DropId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DropChance")
                        .HasColumnType("int");

                    b.Property<bool>("IsLevelPenalty")
                        .HasColumnType("bit");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short?>("MapTypeId")
                        .HasColumnType("smallint");

                    b.Property<short?>("MonsterVNum")
                        .HasColumnType("smallint");

                    b.HasKey("DropId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("MapTypeId");

                    b.HasIndex("MonsterVNum");

                    b.ToTable("Drop");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.FortuneWheel", b =>
                {
                    b.Property<short>("TentaLaFortunaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRareRandom")
                        .HasColumnType("bit");

                    b.Property<int>("ItemGeneratedAmount")
                        .HasColumnType("int");

                    b.Property<short>("ItemGeneratedVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Probability")
                        .HasColumnType("smallint");

                    b.Property<byte>("Rare")
                        .HasColumnType("tinyint");

                    b.Property<short>("ShopId")
                        .HasColumnType("smallint");

                    b.Property<int?>("ShopId1")
                        .HasColumnType("int");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint");

                    b.HasKey("TentaLaFortunaId");

                    b.HasIndex("ItemGeneratedVNum");

                    b.HasIndex("ShopId1");

                    b.ToTable("FortuneWheel");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NActDesc", b =>
                {
                    b.Property<int>("I18NActDescId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NActDescId");

                    b.ToTable("I18NActDesc");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NBCard", b =>
                {
                    b.Property<int>("I18NbCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NbCardId");

                    b.ToTable("I18NBCard");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NCard", b =>
                {
                    b.Property<int>("I18NCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NCardId");

                    b.ToTable("I18NCard");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NItem", b =>
                {
                    b.Property<int>("I18NItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NItemId");

                    b.ToTable("I18NItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NMapIdData", b =>
                {
                    b.Property<int>("I18NMapIdDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NMapIdDataId");

                    b.ToTable("I18NMapIdData");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NMapPointData", b =>
                {
                    b.Property<int>("I18NMapPointDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NMapPointDataId");

                    b.ToTable("I18NMapPointData");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NNpcMonster", b =>
                {
                    b.Property<int>("I18NNpcMonsterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NNpcMonsterId");

                    b.ToTable("I18NNpcMonster");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NNpcMonsterTalk", b =>
                {
                    b.Property<int>("I18NNpcMonsterTalkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NNpcMonsterTalkId");

                    b.ToTable("I18NNpcMonsterTalk");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NQuest", b =>
                {
                    b.Property<int>("I18NQuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NQuestId");

                    b.ToTable("I18NQuest");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NShopName", b =>
                {
                    b.Property<int>("I18NShopNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NShopNameId");

                    b.ToTable("I18NShopName");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.I18NSkill", b =>
                {
                    b.Property<int>("I18NSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18NSkillId");

                    b.ToTable("I18NSkill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.Mate", b =>
                {
                    b.Property<long>("MateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Attack")
                        .HasColumnType("tinyint");

                    b.Property<bool>("CanPickUp")
                        .HasColumnType("bit");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Defence")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Direction")
                        .HasColumnType("tinyint");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<double>("Hp")
                        .HasColumnType("float");

                    b.Property<bool>("IsSummonable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamMember")
                        .HasColumnType("bit");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<short>("Loyalty")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<byte>("MateType")
                        .HasColumnType("tinyint");

                    b.Property<double>("Mp")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<short>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Skin")
                        .HasColumnType("smallint");

                    b.HasKey("MateId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("NpcMonsterVNum");

                    b.ToTable("Mate");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.TimeSpacesLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeSpaceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.ToTable("TimeSpacesLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Family", b =>
                {
                    b.Property<long>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FamilyExperience")
                        .HasColumnType("int");

                    b.Property<byte>("FamilyFaction")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FamilyHeadGender")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FamilyLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("FamilyMessage")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long>("LastFactionChange")
                        .HasColumnType("bigint");

                    b.Property<byte>("ManagerAuthorityType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ManagerCanGetHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("ManagerCanInvite")
                        .HasColumnType("bit");

                    b.Property<bool>("ManagerCanNotice")
                        .HasColumnType("bit");

                    b.Property<bool>("ManagerCanShout")
                        .HasColumnType("bit");

                    b.Property<short>("MaxSize")
                        .HasColumnType("smallint");

                    b.Property<byte>("MemberAuthorityType")
                        .HasColumnType("tinyint");

                    b.Property<bool>("MemberCanGetHistory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("WarehouseSize")
                        .HasColumnType("tinyint");

                    b.HasKey("FamilyId");

                    b.ToTable("Family");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.FamilyCharacter", b =>
                {
                    b.Property<long>("FamilyCharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Authority")
                        .HasColumnType("tinyint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("DailyMessage")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rank")
                        .HasColumnType("tinyint");

                    b.HasKey("FamilyCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyCharacter");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.FamilyLog", b =>
                {
                    b.Property<long>("FamilyLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyLogData")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("FamilyLogType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyLogId");

                    b.HasIndex("FamilyId");

                    b.ToTable("FamilyLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.GeneralLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogData")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LogType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.ToTable("GeneralLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Item", b =>
                {
                    b.Property<short>("VNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("BasicUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CellonLvl")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("Color")
                        .HasColumnType("tinyint");

                    b.Property<short>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<byte>("CriticalLuckRate")
                        .HasColumnType("tinyint");

                    b.Property<short>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte>("DarkElement")
                        .HasColumnType("tinyint");

                    b.Property<short>("DarkResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<int>("EffectValue")
                        .HasColumnType("int");

                    b.Property<byte>("Element")
                        .HasColumnType("tinyint");

                    b.Property<short>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<byte>("EquipmentSlot")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FireElement")
                        .HasColumnType("tinyint");

                    b.Property<short>("FireResistance")
                        .HasColumnType("smallint");

                    b.Property<byte>("Height")
                        .HasColumnType("tinyint");

                    b.Property<short>("HitRate")
                        .HasColumnType("smallint");

                    b.Property<short>("Hp")
                        .HasColumnType("smallint");

                    b.Property<short>("HpRegeneration")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColored")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDroppable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeroic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHolder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMinilandObject")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoldable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTradable")
                        .HasColumnType("bit");

                    b.Property<byte>("ItemSubType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ItemType")
                        .HasColumnType("tinyint");

                    b.Property<long>("ItemValidTime")
                        .HasColumnType("bigint");

                    b.Property<byte>("LevelJobMinimum")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LevelMinimum")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LightElement")
                        .HasColumnType("tinyint");

                    b.Property<short>("LightResistance")
                        .HasColumnType("smallint");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaxCellon")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaxCellonLvl")
                        .HasColumnType("tinyint");

                    b.Property<short>("MaxElementRate")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaximumAmmo")
                        .HasColumnType("tinyint");

                    b.Property<int>("MinilandObjectPoint")
                        .HasColumnType("int");

                    b.Property<short>("MoreHp")
                        .HasColumnType("smallint");

                    b.Property<short>("MoreMp")
                        .HasColumnType("smallint");

                    b.Property<short>("Morph")
                        .HasColumnType("smallint");

                    b.Property<short>("Mp")
                        .HasColumnType("smallint");

                    b.Property<short>("MpRegeneration")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<short>("PvpDefence")
                        .HasColumnType("smallint");

                    b.Property<byte>("PvpStrength")
                        .HasColumnType("tinyint");

                    b.Property<short>("ReduceOposantResistance")
                        .HasColumnType("smallint");

                    b.Property<long>("ReputPrice")
                        .HasColumnType("bigint");

                    b.Property<byte>("ReputationMinimum")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SecondaryElement")
                        .HasColumnType("tinyint");

                    b.Property<long>("SellToNpcPrice")
                        .HasColumnType("bigint");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<int>("SideReputation")
                        .HasColumnType("int");

                    b.Property<byte>("SpType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Speed")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<short>("WaitDelay")
                        .HasColumnType("smallint");

                    b.Property<byte>("WaterElement")
                        .HasColumnType("tinyint");

                    b.Property<short>("WaterResistance")
                        .HasColumnType("smallint");

                    b.Property<byte>("Width")
                        .HasColumnType("tinyint");

                    b.HasKey("VNum");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ItemInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("Ammo")
                        .HasColumnType("tinyint");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long?>("BazaarItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BoundCharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte?>("Cellon")
                        .HasColumnType("tinyint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short?>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<short?>("CriticalDodge")
                        .HasColumnType("smallint");

                    b.Property<byte?>("CriticalLuckRate")
                        .HasColumnType("tinyint");

                    b.Property<short?>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short?>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<byte?>("DarkElement")
                        .HasColumnType("tinyint");

                    b.Property<short?>("DarkResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<short>("Design")
                        .HasColumnType("smallint");

                    b.Property<short?>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<int>("DurabilityPoint")
                        .HasColumnType("int");

                    b.Property<short?>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("EquipmentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("FireElement")
                        .HasColumnType("tinyint");

                    b.Property<short?>("FireResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("HP")
                        .HasColumnType("smallint");

                    b.Property<short?>("HitRate")
                        .HasColumnType("smallint");

                    b.Property<short?>("HoldingVNum")
                        .HasColumnType("smallint");

                    b.Property<bool?>("IsEmpty")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPartnerEquipment")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ItemDeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<byte?>("LightElement")
                        .HasColumnType("tinyint");

                    b.Property<short?>("LightResistance")
                        .HasColumnType("smallint");

                    b.Property<short?>("MP")
                        .HasColumnType("smallint");

                    b.Property<short?>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("MaxElementRate")
                        .HasColumnType("smallint");

                    b.Property<short>("Rare")
                        .HasColumnType("smallint");

                    b.Property<short?>("ShellRarity")
                        .HasColumnType("smallint");

                    b.Property<short?>("SlDamage")
                        .HasColumnType("smallint");

                    b.Property<short?>("SlDefence")
                        .HasColumnType("smallint");

                    b.Property<short?>("SlElement")
                        .HasColumnType("smallint");

                    b.Property<short?>("SlHP")
                        .HasColumnType("smallint");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<byte?>("SpDamage")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpDark")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpDefence")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpElement")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpFire")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpHP")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpLight")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpStoneUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("SpWater")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WaterElement")
                        .HasColumnType("tinyint");

                    b.Property<short?>("WaterResistance")
                        .HasColumnType("smallint");

                    b.Property<long?>("XP")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BoundCharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemVNum");

                    b.ToTable("ItemInstance");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogChat", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChatMessage")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("ChatType")
                        .HasColumnType("tinyint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("CharacterId");

                    b.ToTable("LogChat");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogCommands", b =>
                {
                    b.Property<long>("CommandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CommandId");

                    b.HasIndex("CharacterId");

                    b.ToTable("LogCommands");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogDrop", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Map")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("LogId");

                    b.HasIndex("CharacterId");

                    b.ToTable("LogDrop");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogPutItem", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Map")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("LogId");

                    b.ToTable("LogPutItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Mail", b =>
                {
                    b.Property<long>("MailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("AttachmentAmount")
                        .HasColumnType("smallint");

                    b.Property<short>("AttachmentDesign")
                        .HasColumnType("smallint");

                    b.Property<byte>("AttachmentLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AttachmentRarity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AttachmentUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<short?>("AttachmentVNum")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EqPacket")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsOpened")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSenderCopy")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<byte>("SenderClass")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SenderGender")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SenderHairColor")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SenderHairStyle")
                        .HasColumnType("tinyint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<short>("SenderMorphId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("MailId");

                    b.HasIndex("AttachmentVNum");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MaintenanceLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("LogId");

                    b.ToTable("MaintenanceLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Map", b =>
                {
                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("GoldMapRate")
                        .HasColumnType("tinyint");

                    b.Property<short>("GridMapId")
                        .HasColumnType("smallint");

                    b.Property<int>("MeteoriteLevel")
                        .HasColumnType("int");

                    b.Property<int>("Music")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("ShopAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<byte>("XpRate")
                        .HasColumnType("tinyint");

                    b.HasKey("MapId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapMonster", b =>
                {
                    b.Property<int>("MapMonsterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("bit");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<short>("MonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint");

                    b.HasKey("MapMonsterId");

                    b.HasIndex("MapId");

                    b.HasIndex("MonsterVNum");

                    b.ToTable("MapMonster");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapNpc", b =>
                {
                    b.Property<int>("MapNpcId")
                        .HasColumnType("int");

                    b.Property<short>("Dialog")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<short>("EffectDelay")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoving")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSitting")
                        .HasColumnType("bit");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("NpcVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Position")
                        .HasColumnType("tinyint");

                    b.HasKey("MapNpcId");

                    b.HasIndex("MapId");

                    b.HasIndex("NpcVNum");

                    b.ToTable("MapNpc");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapType", b =>
                {
                    b.Property<short>("MapTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MapTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("PotionDelay")
                        .HasColumnType("smallint");

                    b.Property<long?>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnMapTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("MapTypeId");

                    b.HasIndex("RespawnMapTypeId");

                    b.HasIndex("ReturnMapTypeId");

                    b.ToTable("MapType");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapTypeMap", b =>
                {
                    b.Property<short>("MapTypeMapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("MapTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("MapTypeMapId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapTypeId");

                    b.ToTable("MapTypeMap");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MinigameLog", b =>
                {
                    b.Property<long>("MinigameLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("EndTime")
                        .HasColumnType("bigint");

                    b.Property<byte>("Minigame")
                        .HasColumnType("tinyint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<long>("StartTime")
                        .HasColumnType("bigint");

                    b.HasKey("MinigameLogId");

                    b.HasIndex("CharacterId");

                    b.ToTable("MinigameLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MinilandObject", b =>
                {
                    b.Property<long>("MinilandObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ItemInstanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Level1BoxAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Level2BoxAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Level3BoxAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Level4BoxAmount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Level5BoxAmount")
                        .HasColumnType("tinyint");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.HasKey("MinilandObjectId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemInstanceId");

                    b.ToTable("MinilandObject");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.NpcMonster", b =>
                {
                    b.Property<short>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("AmountRequired")
                        .HasColumnType("smallint");

                    b.Property<byte>("AttackClass")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AttackUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<byte>("BasicArea")
                        .HasColumnType("tinyint");

                    b.Property<short>("BasicCooldown")
                        .HasColumnType("smallint");

                    b.Property<byte>("BasicRange")
                        .HasColumnType("tinyint");

                    b.Property<short>("BasicSkill")
                        .HasColumnType("smallint");

                    b.Property<bool>("Catch")
                        .HasColumnType("bit");

                    b.Property<short>("CloseDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("Concentrate")
                        .HasColumnType("smallint");

                    b.Property<int>("Contributi")
                        .HasColumnType("int");

                    b.Property<byte>("CriticalChance")
                        .HasColumnType("tinyint");

                    b.Property<short>("CriticalRate")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMaximum")
                        .HasColumnType("smallint");

                    b.Property<short>("DamageMinimum")
                        .HasColumnType("smallint");

                    b.Property<int>("DarkResistance")
                        .HasColumnType("int");

                    b.Property<short>("DefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<byte>("DefenceUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<short>("DistanceDefence")
                        .HasColumnType("smallint");

                    b.Property<short>("DistanceDefenceDodge")
                        .HasColumnType("smallint");

                    b.Property<byte>("Element")
                        .HasColumnType("tinyint");

                    b.Property<short>("ElementRate")
                        .HasColumnType("smallint");

                    b.Property<int>("FireResistance")
                        .HasColumnType("int");

                    b.Property<byte>("HeroLevel")
                        .HasColumnType("tinyint");

                    b.Property<int>("HeroXP")
                        .HasColumnType("int");

                    b.Property<bool>("IsHostile")
                        .HasColumnType("bit");

                    b.Property<int>("JobXP")
                        .HasColumnType("int");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<int>("LightResistance")
                        .HasColumnType("int");

                    b.Property<short>("MagicDefence")
                        .HasColumnType("smallint");

                    b.Property<int>("MaxHP")
                        .HasColumnType("int");

                    b.Property<byte>("MaxLevelXP")
                        .HasColumnType("tinyint");

                    b.Property<int>("MaxMP")
                        .HasColumnType("int");

                    b.Property<byte>("MinLevelXP")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MonsterType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("NoAggresiveIcon")
                        .HasColumnType("bit");

                    b.Property<byte>("NoticeRange")
                        .HasColumnType("tinyint");

                    b.Property<short>("OriginalNpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Race")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RaceType")
                        .HasColumnType("tinyint");

                    b.Property<int>("RespawnTime")
                        .HasColumnType("int");

                    b.Property<byte>("Speed")
                        .HasColumnType("tinyint");

                    b.Property<short>("VNumRequired")
                        .HasColumnType("smallint");

                    b.Property<int>("WaterResistance")
                        .HasColumnType("int");

                    b.Property<int>("XP")
                        .HasColumnType("int");

                    b.HasKey("NpcMonsterVNum");

                    b.ToTable("NpcMonster");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.NpcMonsterSkill", b =>
                {
                    b.Property<long>("NpcMonsterSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("NpcMonsterVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rate")
                        .HasColumnType("smallint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("NpcMonsterSkillId");

                    b.HasIndex("NpcMonsterVNum");

                    b.HasIndex("SkillVNum");

                    b.ToTable("NpcMonsterSkill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.PartnerSkill", b =>
                {
                    b.Property<long>("PartnerSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EquipmentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.HasKey("PartnerSkillId");

                    b.ToTable("PartnerSkill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.PenaltyLog", b =>
                {
                    b.Property<int>("PenaltyLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Penalty")
                        .HasColumnType("tinyint");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("PenaltyLogId");

                    b.HasIndex("AccountId");

                    b.ToTable("PenaltyLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Portal", b =>
                {
                    b.Property<int>("PortalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("DestinationMapId")
                        .HasColumnType("smallint");

                    b.Property<short>("DestinationX")
                        .HasColumnType("smallint");

                    b.Property<short>("DestinationY")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("NomeOggetto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("RequiredItem")
                        .HasColumnType("smallint");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<short>("SourceMapId")
                        .HasColumnType("smallint");

                    b.Property<short>("SourceX")
                        .HasColumnType("smallint");

                    b.Property<short>("SourceY")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("PortalId");

                    b.HasIndex("DestinationMapId");

                    b.HasIndex("SourceMapId");

                    b.ToTable("Portal");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Quest", b =>
                {
                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DialogNpcId")
                        .HasColumnType("int");

                    b.Property<int?>("DialogNpcVNum")
                        .HasColumnType("int");

                    b.Property<int?>("EndDialogId")
                        .HasColumnType("int");

                    b.Property<int>("InfoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDaily")
                        .HasColumnType("bit");

                    b.Property<byte>("LevelMax")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LevelMin")
                        .HasColumnType("tinyint");

                    b.Property<long?>("NextQuestId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestType")
                        .HasColumnType("int");

                    b.Property<int?>("StartDialogId")
                        .HasColumnType("int");

                    b.Property<short?>("TargetMap")
                        .HasColumnType("smallint");

                    b.Property<short?>("TargetX")
                        .HasColumnType("smallint");

                    b.Property<short?>("TargetY")
                        .HasColumnType("smallint");

                    b.HasKey("QuestId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.QuestLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastDaily")
                        .HasColumnType("datetime2");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("QuestLog");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.QuestObjective", b =>
                {
                    b.Property<int>("QuestObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Data")
                        .HasColumnType("int");

                    b.Property<int?>("DropRate")
                        .HasColumnType("int");

                    b.Property<int?>("Objective")
                        .HasColumnType("int");

                    b.Property<byte>("ObjectiveIndex")
                        .HasColumnType("tinyint");

                    b.Property<int>("QuestId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialData")
                        .HasColumnType("int");

                    b.HasKey("QuestObjectiveId");

                    b.ToTable("QuestObjective");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.QuestReward", b =>
                {
                    b.Property<long>("QuestRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("Data")
                        .HasColumnType("int");

                    b.Property<byte>("Design")
                        .HasColumnType("tinyint");

                    b.Property<long>("QuestId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Rarity")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RewardType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint");

                    b.HasKey("QuestRewardId");

                    b.ToTable("QuestReward");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.QuicklistEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("Morph")
                        .HasColumnType("smallint");

                    b.Property<short>("Pos")
                        .HasColumnType("smallint");

                    b.Property<short>("Q1")
                        .HasColumnType("smallint");

                    b.Property<short>("Q2")
                        .HasColumnType("smallint");

                    b.Property<short>("Slot")
                        .HasColumnType("smallint");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("QuicklistEntry");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Recipe", b =>
                {
                    b.Property<short>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rare")
                        .HasColumnType("smallint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint");

                    b.HasKey("RecipeId");

                    b.HasIndex("ItemVNum");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RecipeItem", b =>
                {
                    b.Property<short>("RecipeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Amount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("RecipeId")
                        .HasColumnType("smallint");

                    b.HasKey("RecipeItemId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RecipeList", b =>
                {
                    b.Property<int>("RecipeListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short?>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<int?>("MapNpcId")
                        .HasColumnType("int");

                    b.Property<short>("RecipeId")
                        .HasColumnType("smallint");

                    b.HasKey("RecipeListId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("MapNpcId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeList");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Respawn", b =>
                {
                    b.Property<long>("RespawnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<long>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("RespawnId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("MapId");

                    b.HasIndex("RespawnMapTypeId");

                    b.ToTable("Respawn");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RespawnMapType", b =>
                {
                    b.Property<long>("RespawnMapTypeId")
                        .HasColumnType("bigint");

                    b.Property<short>("DefaultMapId")
                        .HasColumnType("smallint");

                    b.Property<short>("DefaultX")
                        .HasColumnType("smallint");

                    b.Property<short>("DefaultY")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("RespawnMapTypeId");

                    b.HasIndex("DefaultMapId");

                    b.ToTable("RespawnMapType");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RollGeneratedItem", b =>
                {
                    b.Property<short>("RollGeneratedItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRareRandom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperReward")
                        .HasColumnType("bit");

                    b.Property<short>("ItemGeneratedAmount")
                        .HasColumnType("smallint");

                    b.Property<short>("ItemGeneratedDesign")
                        .HasColumnType("smallint");

                    b.Property<byte>("ItemGeneratedUpgrade")
                        .HasColumnType("tinyint");

                    b.Property<short>("ItemGeneratedVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("MaximumOriginalItemRare")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumOriginalItemRare")
                        .HasColumnType("tinyint");

                    b.Property<short>("OriginalItemDesign")
                        .HasColumnType("smallint");

                    b.Property<short>("OriginalItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Probability")
                        .HasColumnType("smallint");

                    b.HasKey("RollGeneratedItemId");

                    b.HasIndex("ItemGeneratedVNum");

                    b.HasIndex("OriginalItemVNum");

                    b.ToTable("RollGeneratedItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ScriptedInstance", b =>
                {
                    b.Property<short>("ScriptedInstanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<short>("PositionX")
                        .HasColumnType("smallint");

                    b.Property<short>("PositionY")
                        .HasColumnType("smallint");

                    b.Property<int>("QuestTimeSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("Script")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(2147483647);

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("ScriptedInstanceId");

                    b.HasIndex("MapId");

                    b.ToTable("ScriptedInstance");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ShellEffect", b =>
                {
                    b.Property<long>("ShellEffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Effect")
                        .HasColumnType("tinyint");

                    b.Property<byte>("EffectLevel")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("EquipmentSerialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("ShellEffectId");

                    b.ToTable("ShellEffect");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MapNpcId")
                        .HasColumnType("int");

                    b.Property<byte>("MenuType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<byte>("ShopType")
                        .HasColumnType("tinyint");

                    b.HasKey("ShopId");

                    b.HasIndex("MapNpcId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ShopItem", b =>
                {
                    b.Property<int>("ShopItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Color")
                        .HasColumnType("tinyint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("Rare")
                        .HasColumnType("smallint");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Upgrade")
                        .HasColumnType("tinyint");

                    b.HasKey("ShopItemId");

                    b.HasIndex("ItemVNum");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ShopSkill", b =>
                {
                    b.Property<int>("ShopSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("ShopSkillId");

                    b.HasIndex("ShopId");

                    b.HasIndex("SkillVNum");

                    b.ToTable("ShopSkill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Skill", b =>
                {
                    b.Property<short>("SkillVNum")
                        .HasColumnType("smallint");

                    b.Property<short>("AttackAnimation")
                        .HasColumnType("smallint");

                    b.Property<byte>("CPCost")
                        .HasColumnType("tinyint");

                    b.Property<short>("CastAnimation")
                        .HasColumnType("smallint");

                    b.Property<short>("CastEffect")
                        .HasColumnType("smallint");

                    b.Property<short>("CastId")
                        .HasColumnType("smallint");

                    b.Property<short>("CastTime")
                        .HasColumnType("smallint");

                    b.Property<byte>("Class")
                        .HasColumnType("tinyint");

                    b.Property<short>("Cooldown")
                        .HasColumnType("smallint");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<short>("Effect")
                        .HasColumnType("smallint");

                    b.Property<byte>("Element")
                        .HasColumnType("tinyint");

                    b.Property<byte>("HitType")
                        .HasColumnType("tinyint");

                    b.Property<short>("ItemVNum")
                        .HasColumnType("smallint");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<byte>("LevelMinimum")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumAdventurerLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumArcherLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumMagicianLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinimumSwordmanLevel")
                        .HasColumnType("tinyint");

                    b.Property<short>("MpCost")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<byte>("Range")
                        .HasColumnType("tinyint");

                    b.Property<byte>("SkillType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TargetRange")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TargetType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<short>("UpgradeSkill")
                        .HasColumnType("smallint");

                    b.Property<short>("UpgradeType")
                        .HasColumnType("smallint");

                    b.HasKey("SkillVNum");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.StaticBonus", b =>
                {
                    b.Property<long>("StaticBonusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StaticBonusType")
                        .HasColumnType("tinyint");

                    b.HasKey("StaticBonusId");

                    b.HasIndex("CharacterId");

                    b.ToTable("StaticBonus");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.StaticBuff", b =>
                {
                    b.Property<long>("StaticBuffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CardId")
                        .HasColumnType("smallint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("int");

                    b.HasKey("StaticBuffId");

                    b.HasIndex("CardId");

                    b.HasIndex("CharacterId");

                    b.ToTable("StaticBuff");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Teleporter", b =>
                {
                    b.Property<short>("TeleporterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Index")
                        .HasColumnType("smallint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<int>("MapNpcId")
                        .HasColumnType("int");

                    b.Property<short>("MapX")
                        .HasColumnType("smallint");

                    b.Property<short>("MapY")
                        .HasColumnType("smallint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("TeleporterId");

                    b.HasIndex("MapId");

                    b.HasIndex("MapNpcId");

                    b.ToTable("Teleporter");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.BCard", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Card", "Card")
                        .WithMany("BCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("BCards")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("BCards")
                        .HasForeignKey("NpcMonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.Skill", "Skill")
                        .WithMany("BCards")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.BazaarItem", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.ItemInstance", "ItemInstance")
                        .WithMany("BazaarItem")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("BazaarItem")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Character", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Account", "Account")
                        .WithMany("Character")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("Character")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterQuest", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterRelation", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character1")
                        .WithMany("CharacterRelation1")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Character", "Character2")
                        .WithMany("CharacterRelation2")
                        .HasForeignKey("RelatedCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterSkill", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("CharacterSkill")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Skill", "Skill")
                        .WithMany("CharacterSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.CharacterTitle", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("CharacterTitle")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Combo", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Skill", "Skill")
                        .WithMany("Combo")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Drop", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("Drop")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.MapType", "MapType")
                        .WithMany("Drops")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("Drop")
                        .HasForeignKey("MonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.FortuneWheel", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("FortuneWheel")
                        .HasForeignKey("ItemGeneratedVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Shop", "Shop")
                        .WithMany("FortuneWheel")
                        .HasForeignKey("ShopId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Entities.Mate", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("Mate")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("Mate")
                        .HasForeignKey("NpcMonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.FamilyCharacter", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("FamilyCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Family", "Family")
                        .WithMany("FamilyCharacters")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.FamilyLog", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Family", "Family")
                        .WithMany("FamilyLogs")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.GeneralLog", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Account", "Account")
                        .WithMany("GeneralLog")
                        .HasForeignKey("AccountId");

                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("GeneralLog")
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ItemInstance", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "BoundCharacter")
                        .WithMany()
                        .HasForeignKey("BoundCharacterId");

                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("ItemInstances")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogChat", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogCommands", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.LogDrop", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId");
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Mail", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("Mail")
                        .HasForeignKey("AttachmentVNum")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.Character", "Receiver")
                        .WithMany("Mail1")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Character", "Sender")
                        .WithMany("Mail")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapMonster", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("MapMonster")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("MapMonster")
                        .HasForeignKey("MonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapNpc", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("MapNpc")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("MapNpc")
                        .HasForeignKey("NpcVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapType", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.RespawnMapType", "RespawnMapType")
                        .WithMany("MapTypes")
                        .HasForeignKey("RespawnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GloomyTale.DAL.EF.RespawnMapType", "ReturnMapType")
                        .WithMany("MapTypes1")
                        .HasForeignKey("ReturnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MapTypeMap", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("MapTypeMap")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.MapType", "MapType")
                        .WithMany("MapTypeMap")
                        .HasForeignKey("MapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MinigameLog", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("MinigameLog")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.MinilandObject", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("MinilandObject")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.ItemInstance", "ItemInstance")
                        .WithMany("MinilandObject")
                        .HasForeignKey("ItemInstanceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.NpcMonsterSkill", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.NpcMonster", "NpcMonster")
                        .WithMany("NpcMonsterSkill")
                        .HasForeignKey("NpcMonsterVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Skill", "Skill")
                        .WithMany("NpcMonsterSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.PenaltyLog", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Account", "Account")
                        .WithMany("PenaltyLog")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Portal", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("Portal")
                        .HasForeignKey("DestinationMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Map", "Map1")
                        .WithMany("Portal1")
                        .HasForeignKey("SourceMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.QuicklistEntry", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("QuicklistEntry")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Recipe", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("Recipe")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RecipeItem", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("RecipeItem")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Recipe", "Recipe")
                        .WithMany("RecipeItem")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RecipeList", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("RecipeList")
                        .HasForeignKey("ItemVNum");

                    b.HasOne("GloomyTale.DAL.EF.MapNpc", "MapNpc")
                        .WithMany("RecipeList")
                        .HasForeignKey("MapNpcId");

                    b.HasOne("GloomyTale.DAL.EF.Recipe", "Recipe")
                        .WithMany("RecipeList")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Respawn", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("Respawn")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("Respawn")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.RespawnMapType", "RespawnMapType")
                        .WithMany("Respawn")
                        .HasForeignKey("RespawnMapTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RespawnMapType", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("RespawnMapType")
                        .HasForeignKey("DefaultMapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.RollGeneratedItem", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "ItemGenerated")
                        .WithMany("RollGeneratedItem2")
                        .HasForeignKey("ItemGeneratedVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Item", "OriginalItem")
                        .WithMany("RollGeneratedItem")
                        .HasForeignKey("OriginalItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ScriptedInstance", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("ScriptedInstance")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Shop", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.MapNpc", "MapNpc")
                        .WithMany("Shop")
                        .HasForeignKey("MapNpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ShopItem", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Item", "Item")
                        .WithMany("ShopItem")
                        .HasForeignKey("ItemVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Shop", "Shop")
                        .WithMany("ShopItem")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.ShopSkill", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Shop", "Shop")
                        .WithMany("ShopSkill")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Skill", "Skill")
                        .WithMany("ShopSkill")
                        .HasForeignKey("SkillVNum")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.StaticBonus", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("StaticBonus")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.StaticBuff", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Card", "Card")
                        .WithMany("StaticBuff")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.Character", "Character")
                        .WithMany("StaticBuff")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("GloomyTale.DAL.EF.Teleporter", b =>
                {
                    b.HasOne("GloomyTale.DAL.EF.Map", "Map")
                        .WithMany("Teleporter")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GloomyTale.DAL.EF.MapNpc", "MapNpc")
                        .WithMany("Teleporter")
                        .HasForeignKey("MapNpcId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
